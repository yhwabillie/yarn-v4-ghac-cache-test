# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions

# 트리거를 실행할 브랜치 지정
on:
  push:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 깃헙에 있는 프로젝트를 서버로 내려받음
      - name: Git Checkout
        uses: actions/checkout@v4

      # 노드 버전 설치
      - name: Setup Node 20.11.1
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.1
          cache: yarn

      # yarn 버전 설정
      - name: Set yarn version
        id: set-version
        run: yarn set version 1.22.22

      # yarn 캐시 경로 불러오기
      # - name: Get cache dir path
      #   id: yarn-cache-dir-path
      #   run: echo "CACHE_DIR=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      # yarn 캐싱
      - name: Yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ steps.set-version.outputs.YARN_VERSION }}
        - if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' }}
        run: yarn install
        - run: yarn deploy

      # yarn 캐시 체크
      - name: Install dependencies
        run: |
          CACHE_HIT="${{ steps.yarn-cache.outputs.cache-hit }}"
          NODE_MODULES_EXISTS=$(test -d "node_modules" && echo "true" || echo "false")
          if [[ "$CACHE_HIT" != 'true' || "$NODE_MODULES_EXISTS" == 'false' ]]; then
            yarn install
          fi
          yarn deploy

      # AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 rm s3://${{ secrets.AWS_S3_BUCKET }} --recursive
          aws s3 cp --recursive --region ${{ secrets.AWS_REGION }} ./out s3://${{ secrets.AWS_S3_BUCKET }}

      - name: Clear Cache to Cloudfront
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_ID}} --paths "/*"
